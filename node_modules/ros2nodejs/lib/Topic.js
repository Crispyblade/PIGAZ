"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Topic = void 0;
const events_1 = require("events");
class Topic extends events_1.EventEmitter {
    constructor(ros, name, messageType) {
        super();
        this.ros = ros;
        this.name = name;
        this.messageType = messageType;
        this.onMessage = this.onMessage.bind(this);
    }
    subscribe(callback) {
        this.on('message', callback);
        if (this.subscribeId) {
            return;
        }
        this.ros.on(this.name, this.onMessage);
        this.subscribeId = this.ros.getRandomUUID();
        this.ros.send({
            op: 'subscribe',
            id: this.subscribeId,
            topic: this.name,
            type: this.messageType,
        });
    }
    unsubscribe(callback) {
        this.off('message', callback);
        if (this.listenerCount('message') > 0) {
            return;
        }
        if (!this.subscribeId) {
            return;
        }
        this.ros.off(this.name, this.onMessage);
        this.ros.send({
            op: 'unsubscribe',
            id: this.subscribeId,
            topic: this.name,
        });
        this.subscribeId = undefined;
    }
    advertise() {
        if (this.advertiseId) {
            return;
        }
        this.advertiseId = this.ros.getRandomUUID();
        this.ros.send({
            op: 'advertise',
            id: this.advertiseId,
            topic: this.name,
            type: this.messageType,
        });
    }
    unadvertise() {
        if (!this.advertiseId) {
            return;
        }
        this.ros.send({
            op: 'unadvertise',
            id: this.advertiseId,
            topic: this.name,
        });
        this.advertiseId = undefined;
    }
    publish(message) {
        this.advertise();
        this.ros.send({
            op: 'publish',
            id: this.ros.getRandomUUID(),
            topic: this.name,
            msg: message,
        });
    }
    onMessage(message) {
        this.emit('message', message);
    }
}
exports.Topic = Topic;
